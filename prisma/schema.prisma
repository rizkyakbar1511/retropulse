// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Game {
  id          Int        @id @default(autoincrement())
  title       String
  slug        String     @unique
  description String
  image       String
  game_url    String
  published   Boolean
  featured    Boolean    @default(false)
  created_at  DateTime   @default(now())
  categories  Category[]
}

model Category {
  id    Int    @id @default(autoincrement())
  title String
  slug  String
  core  String
  image String @default("default_image.png")
  icon  String @default("default_icon.png")
  games Game[]
}

model User {
  id            String          @id @default(cuid())
  image         String?
  name          String?
  email         String          @unique
  password      String
  role          String          @default("user")
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
